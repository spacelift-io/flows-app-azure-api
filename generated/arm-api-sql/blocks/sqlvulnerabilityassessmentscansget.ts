import { AppBlock, events } from "@slflows/sdk/v1";
import { makeAzureRequest } from "../utils/azureRequest";

const SqlVulnerabilityAssessmentScans_Get: AppBlock = {
  name: "Sql Vulnerability Assessment Scans / Get",
  description: "Get a system database vulnerability assessment scan record.",
  category: "Sql Vulnerability Assessment Scans",
  inputs: {
    default: {
      config: {
        serverName: {
          name: "Server Name",
          description: "Name of the server",
          type: "string",
          required: true,
        },
        vulnerabilityAssessmentName: {
          name: "Vulnerability Assessment Name",
          description: "Name of the vulnerability assessment",
          type: "string",
          required: true,
        },
        scanId: {
          name: "Scan ID",
          description: "Unique identifier",
          type: "string",
          required: true,
        },
        systemDatabaseName: {
          name: "System Database Name",
          description: "The vulnerability assessment system database name.",
          type: "string",
          required: true,
        },
        subscriptionId: {
          name: "Subscription ID",
          description:
            "Azure subscription ID (optional, falls back to app-level default if not provided)",
          type: "string",
          required: false,
        },
        resourceGroupName: {
          name: "Resource Group Name",
          description:
            "Azure resource group name (optional, falls back to app-level default if not provided)",
          type: "string",
          required: false,
        },
      },
      onEvent: async (input) => {
        const url =
          `https://management.azure.com/subscriptions/${input.event.inputConfig.subscriptionId || input.app.config.subscriptionId}/resourceGroups/${input.event.inputConfig.resourceGroupName || input.app.config.resourceGroupName}/providers/Microsoft.Sql/servers/${input.event.inputConfig.serverName}/sqlVulnerabilityAssessments/${input.event.inputConfig.vulnerabilityAssessmentName}/scans/${input.event.inputConfig.scanId}` +
          "?api-version=2023-08-01" +
          (input.event.inputConfig.systemDatabaseName
            ? `&systemDatabaseName=${input.event.inputConfig.systemDatabaseName}`
            : "");

        const result = await makeAzureRequest(
          input,
          url,
          "GET",
          undefined,
          undefined,
          false,
        );
        await events.emit(result || {});
      },
    },
  },
  outputs: {
    default: {
      possiblePrimaryParents: ["default"],
      type: {
        type: "object",
        properties: {
          systemData: {
            type: "object",
            properties: {
              createdBy: {
                type: "string",
              },
              createdByType: {
                type: "string",
              },
              createdAt: {
                type: "string",
              },
              lastModifiedBy: {
                type: "string",
              },
              lastModifiedByType: {
                type: "string",
              },
              lastModifiedAt: {
                type: "string",
              },
            },
          },
          properties: {
            type: "object",
            properties: {
              scanId: {
                type: "string",
              },
              triggerType: {
                type: "string",
              },
              state: {
                type: "string",
              },
              startTime: {
                type: "string",
              },
              endTime: {
                type: "string",
              },
              errors: {
                type: "array",
                items: {
                  type: "object",
                  properties: {
                    code: {
                      type: "string",
                    },
                    message: {
                      type: "string",
                    },
                  },
                },
              },
              server: {
                type: "string",
              },
              database: {
                type: "string",
              },
              sqlVersion: {
                type: "string",
              },
              highSeverityFailedRulesCount: {
                type: "integer",
              },
              mediumSeverityFailedRulesCount: {
                type: "integer",
              },
              lowSeverityFailedRulesCount: {
                type: "integer",
              },
              totalPassedRulesCount: {
                type: "integer",
              },
              totalFailedRulesCount: {
                type: "integer",
              },
              totalRulesCount: {
                type: "integer",
              },
              isBaselineApplied: {
                type: "boolean",
              },
              lastScanTime: {
                type: "string",
              },
            },
          },
        },
      },
    },
  },
};

export default SqlVulnerabilityAssessmentScans_Get;
